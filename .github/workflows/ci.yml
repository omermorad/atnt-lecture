name: Continuous Integration
on: [pull_request]

permissions:
  id-token: write
  contents: read
  checks: write

jobs:
  semantics:
    name: Semantics
    runs-on: ubuntu-latest
    outputs:
      scope: ${{ steps.scope.outputs.name }}
    steps:
      - uses: 8BitJonny/gh-get-current-pr@2.2.0
        id: pull-request
        with:
          sha: ${{ github.head_ref }}

      - name: Add Commit Lint
        if: ${{ steps.pull-request.outputs.pr_found == 'true' }}
        run: |
          npm init -y
          npm install @commitlint/cli @commitlint/config-angular
          echo \
          "module.exports={extends:['@commitlint/config-angular'],rules:{'subject-empty':[2,'never'],'scope-empty':[2,'never'],'type-case':[2,'always','lower-case'],'type-empty':[2,'never'],'type-enum':[2,'always',['chore','feat','fix','refactor']],'scope-enum':[2, 'always', ['core', 'types']]}};" \
          > commitlint.config.js

      - name: Validate Semantic Title
        if: ${{ steps.pull-request.outputs.pr_found == 'true' }}
        run: |
          echo "${{ steps.pull-request.outputs.pr_title }}" | npx commitlint

      - name: Get Semantic Commit Scope
        if: ${{ steps.pull-request.outputs.pr_found == 'true' }}
        id: scope
        run: |
          echo "name=$(echo '${{ steps.pull-request.outputs.pr_title }}' | cut -d'(' -f1)" >> $GITHUB_OUTPUT

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn
        run: yarn --frozen-lockfile

      - name: Lint
        run: yarn lint

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['core']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn
        run: yarn

      - name: Create Coverage Directory
        run: mkdir -p ${{ github.workspace }}/coverage

      - name: Test
        run: yarn lerna exec yarn test --scope @calculator/${{ matrix.project }}
        env:
          JEST_JUNIT_OUTPUT_NAME: ${{ matrix.project }}.xml
          JEST_JUNIT_OUTPUT_DIR: ${{ github.workspace }}/test-reports
          JUNIT_OUTPUT_NAME: ${{ matrix.project }}
          JUNIT_OUTPUT_DIR: ${{ github.workspace }}/test-reports
          COVERAGE_DIR: ${{ github.workspace }}/coverage
          COVERAGE_FILE: coverage-${{ matrix.project }}.xml

      - name: Tests Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          reporter: 'jest-junit'
          name: Tests Results (${{ matrix.project }})
          path: ${{ github.workspace }}/test-reports/${{ matrix.project }}.xml
          fail-on-error: false
